.model small
.stack 100h

.data
	a DW 0 
	b DW 0 
	i DW 0
	k DW 0
	i1 DW 4
	i2 DW 5
	res DW 0

.code
main proc

	;инициализируем сегмент данных
	mov ax, @data
	mov ds, ax ; устанавливаем регистр ds на сегмент данных

	mov ax, i ; помещаем значение i в ax 
	shl ax, 1 ; ax = 2i
	
	mov bx, a ; перемещаем а в ах 
	cmp bx, b ; сравниваем a и b 
	jge else_if1 jae else_if1 ; если a <= b переходим к else_if1
 	; если а > b
	; ---- СЧИТАЕМ i1 ----
	
	sub i1, ax ; вычитаем 2i из i1 для отрицательного значения (i1 = 4 - 2i)
	add i1, 11; прибавляем к значению в i1 11 (i1 = 4 - 2i + 11 = 15 - 2i)
	
	; ---- СЧИТАЕМ i2 ----
	
	shl ax, 1 ; сдвигаем aх на 1 бит (получаем, что ax = 4i)
	sub i2, ax ; вычитаем 4i из  5 для отрицательного значения i2 = -4i + 5)
	
	jmp end_if1 ; переходим на end_if1
	
else_if1:
	; если a <= b
	; ---- СЧИТАЕМ i1 ----
	add ax, i ; получаем, что ax = 3i
	add i1, ax ; добавляем к i1 значение ax (3i) (получаем, что i1 = 4 + 3i)

	; ---- СЧИТАЕМ i2 ----
	
	sub i2, ax ; инвертируем для отрицательного значения (i2 = 5 - 3i)
	add i2, 5 ; прибавляем к i2 5 (i2 = 5 - 3i + 5 = 10 - 3i )

end_if1:

	;--- ОПРЕДЕЛИМ |i1| ---- 
	mov bx, i1 ; перемещаем значение i1 в bx
abs_i1:
	neg bx ; меняем знак 
	js abs_i1 ; если значение bx меньше нуля, то снова меняем знак
	
	;---- ОПРЕДЕЛИМ |i2| ----
	mov cx, i2 ; перемещаем значение i2 в cx
abs_i2:
	neg cx ; меняем знак
	js abs_i2 ; если значение сх меньше нуля, то снова меняем знак
	
	;---- ОПРЕДЕЛИМ res ----
	mov res, cx ; res = |i2|
	cmp k, 0 ; сравниваем k и 0 
	jge else_if2 ;если k >= 0 - переходим в еlse_if2
	
	; k < 0
	sub res, bx ;вычитаем из res значение bx(|i1|) (res = |i2|-|i1|)
	neg res ; берем обратное значение разницы (res = -(|i2|-|i1|) = |i1| - |i2|)
	jmp end_if2 ; перемещаемся в end_if3
	
else_if2:
	; k >= 0 
	cmp cx, 7 ; сравниваем |i2| и 7
	jge max ; если значение в cx(|i2|) >= 7, то не меняем cx и переходим сразу в max
	mov res, 7 ; если в cx < 7, то меняем cx на 7 

max:
	;|i2| >= 7
end_if2: ; 29 команд в вычислительной части

	mov ah, 4Ch 
	int 21h
	
main endp
end